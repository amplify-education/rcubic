#!/usr/bin/env python
# vim: ts=4 noet filetype=python

# This file is part of RCubic
#
#Copyright (c) 2012 Wireless Generation, Inc.
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in
#all copies or substantial portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#THE SOFTWARE.


#camelCase tab indented, if unsure, read pep8 thanks

#TODO
# Fix fileMode config to not use gitRepo as path and rename vars

from __future__ import print_function

import sys
import os
import re
import subprocess
import time
import argparse
import signal
import os.path
import logging
import uuid
import shutil
import functools
import traceback

#######
from RCubic.RESTCommunicator import RESTCommunicator
from RCubic.RCubicScript import RCubicGroup, RCubicScriptParser, ConfigurationError
from RCubic.RCubicUtilities import popenNonblock, FatalRuntimeError, LogToDB
from RCubic.daemon import Daemon
from RCubic import exectree
from RCubic.RCubicNotification import RCubicNotification
#######

#third party libraries:
from lxml import etree


class Rcubic(object):
	def __init__(self, opts):
		#Please don't abuse Rcubic.opts thanks!
		self.opts = opts
		self.log = None
		self.config = {}
		self.port = 0
		self.scriptDir = ""
		self.scriptOverrideDir = ""
		self.gitDir = ""
		self.groups = []
		self.environment = ""
		self.resources = {}
		self.gitHead = ""
		self.token = None
		baseConfigReq = [ "basePath", "gitRepo", "fileMode", "gerritURL", "gerritProject",
						  "environmentOptions", "specialGroups",
						  "listenAddress", "listenPortRange", "jobExpireTime",
						  "smtpServer", "emailSubjectPrefix", "emailFrom", "maxEmailLogSizeKB",
						  "defaultRelease", "SSLKey", "SSLCert", "token"]
		splitOptions = ["specialGroups"]

		configpaths = [ sys.argv[0][0:sys.argv[0].rindex("/")],
						os.path.expanduser("~/.rcubic"),
						os.environ.get("RCUBIC_CONF"),
						"/etc/rcubic"]
		for path in configpaths:
			xmlpath = "%s/rcubic.xml" % path
			if os.path.exists(xmlpath):
				break

		self._readConfig(xmlpath, baseConfigReq, splitOptions=splitOptions)
		self.config["gitRepo"] = [self.config["gitRepo"]]

		self._initPaths()
		self._initGit()
		self._readConfig("%s/config.xml" %(self.releaseDir), splitOptions=splitOptions)

		if self.opts.environment:
			self.environment = self.opts.environment
		elif "environment" in self.config:
			self.environment = self.config["environment"]

		self.notification = RCubicNotification(self.config["emailFrom"],
			self.config["emailSubjectPrefix"], self.config["smtpServer"],
			self.config.get("cc", ""))
		if self.opts.foreground or self.config.get("notification", "True") == "False":
			self.notification.disable()

		if self.opts.sessionMode:
			self.log = LogToDB(":memory:")
		else:
			self.log = LogToDB(self.config["auditLog"])

		self.groups =  self.groupSelect()
		self.rsp = RCubicScriptParser(
			self.groups,
			self.logDir,
			self.releaseDir,
			self._flattenOption(self.opts.whitelist),
			self._flattenOption(self.opts.blacklist),
			self.config.get("scriptregex", None),
			self.resources,
		)
		self.rsp.read_dirs(self.scriptDir)
		self.rsp.read_dirs(self.scriptOverrideDir, True)
		self.rsp.set_href(self.config["gerritURL"], self.config["gerritProject"], self.gitHead, self.gitDir)

		self.tree = self.rsp.init_tree()
		self.tree.legend["time"] = time.strftime("%Y-%m-%d %H:%M:%S")
		self.tree.legend["version"] = self.opts.release
		self.tree.legend["environment"] = self.environment

		for script in self.rsp.scripts():
			for e in script.job.DONE_STATES:
				handler = functools.partial(self.statusEventHandler, script)
				script.job.events[e].rawlink(handler)

		try:
			self._validate()
		except:
			self.cleanup()
			raise


		if self.opts.validate:
			self.cleanup()

	def _validate(self):
		"""Proccess most severe errors first, raising them. those
		which are not immediatelly fatal get appended to errors
		and raised all at once."""
		errors = []

		group = None
		for group in self.groups:
			if group.forceselect == False:
				break
		if group is None or  group.forceselect != False:
			raise ConfigurationError("ERROR: No groups selected for installation")

		egroups = []
		for group in self.groups:
			if len(group.scripts) <= 0:
				egroups.append(group.name)
		if len(egroups) > 0:
			errors.append(
				"Group(s) %s have no scripts associated with them." %
				(" ".join(egroups))
			)

		if self._readNotificationConfig() <= 0:
			errors.append(
				"No notification configured. This is a bad thing"
			)

		for rs in self.rsp.scripts():
			if not rs.regexval:
				errors.append(
					"Script {0} does not pass the regex check ({1})"
					.format(rs.name, self.config.get("scriptregex", ""))
				)

		if not self.environment:
			errors.append("Environment not not specified.")

		self.tree.write_status(self.config["asvgFile"], self.config["njsonFile"], True)

		errors.extend(self.tree.validate())

		valid = self.validate()
		if valid != True:
			errors.append(valid)

		if self.environment not in self.config["environmentOptions"]:
			errors.append("environmentOptions: %s" %self.config["environmentOptions"])

		ngroups = [ prd for scr in self.rsp.scripts() for prd in scr.products ]
		errngroups = self.notifications.has_groups(ngroups)
		if len(errngroups) > 0:
			errors.append(
				"No matching configuration for notification group(s): {0}."
				.format(" ".join(errngroups))
			)

		if len(errors) > 0:
			logging.error("Errors detected")
			for error in errors:
				logging.error(error)
			raise ConfigurationError("Errors:\n {0}".format("\n".join(errors)))


	def _initGit(self):
		#TODO: this will fail if called multiple times in session mode.
		if not self.config["fileMode"]:

			try:
				os.makedirs(self.gitDir)
			except OSError:
				pass

			if not os.access(self.gitDir, os.W_OK):
				raise FatalRuntimeError("ERROR: '%s' does not have write access." %self.gitDir)

			with open("/dev/null", "w") as devnull:
				if subprocess.call(["git","rev-parse","--is-inside-work-tree"], cwd=self.gitDir, stdout=devnull, stderr=devnull) == 0:
					#Repo already exists we just need to updated
					if self.opts.sessionMode:
						raise FatalRuntimeError("'%s' already exists. This should be impossible." %(self.gitDir))
				else:
					try:
						#repo does not exist and needs to be clone
						if subprocess.call(['git', 'clone', self.config["gitRepo"][0], "%s" %(self.gitDir)]) != 0:
							raise FatalRuntimeError("git clone failed")
					except:
						raise FatalRuntimeError("Cannot clone into directory. Is it not empty?")

				#this is a safety to roll back any changes someone's made
				subprocess.call(['git', 'reset', '--hard'], cwd=self.gitDir)

				#Fetch the remote target branch
				fetchCommand = ['git', 'fetch', self.config["gitRepo"][0]]
				if self.opts.refspec:
					fetchCommand.append(self.opts.refspec)
				elif self.opts.branch:
					fetchCommand.append("refs/heads/%s" % self.opts.branch)
				elif "gitBranch" not in self.config:
					fetchCommand.append("refs/heads/master")
				else:
					fetchCommand.append("refs/heads/%s" % self.config["gitBranch"])

				if subprocess.call(fetchCommand, cwd=self.gitDir) != 0:
					raise FatalRuntimeError("git fetch failed")

				#Checkout to fetched commit
				if subprocess.call(['git', 'checkout', 'FETCH_HEAD'], cwd=self.gitDir) != 0:
					raise FatalRuntimeError("git checkout failed 1")

				processResult = popenNonblock(["git", "rev-parse","HEAD"], cwd=self.gitDir)
				if(processResult[0] != 0):
					raise FatalRuntimeError("git head hash get failed")
				self.gitHead = processResult[1].rstrip()

				#subprocess.call(['git', 'log', '-1', '--format="%H"'], cwd=self.gitDir, stdout=githash) #todo:save hash
			logging.info("Git repo has been updated")
			return True
		else:
			# Copy the directory
			try:
				shutil.copytree(self.config["gitRepo"][0], self.gitDir)
			except:
				pass

			try:
				os.makedirs("%s/work/log" % (self.config["basePath"]))
			except OSError:
				pass

			if not os.access(self.gitDir, os.W_OK):
				raise FatalRuntimeError("ERROR: '%s' does not have write access." %self.gitDir)


	def _flattenOption(self, inList):
		outList = []
		if inList is None:
			return outList
		s = re.compile("[;,\s]+")
		for subList in inList:
			outList.extend(s.split(subList))
		return outList

	def _initPaths(self):
		self.originalBasePath = self.config["basePath"]
		self.config["archivePath"] = "%s/archive/" % (self.config["basePath"])
		if self.opts.sessionMode:
			self.config["basePath"] = "%s/%s" %(self.config["basePath"], uuid.uuid1())

		self.logDir = "%s/work/log" % self.config["basePath"]
		self.gitDir = "%s/work/git" % self.config["basePath"]
		if self.opts.release:
			self.config["defaultRelease"] = self.opts.release
		self.releaseDir = "%s/%s" % (self.gitDir, self.config["defaultRelease"])
		self.scriptOverrideDir = "%s/override" % self.releaseDir
		self.scriptDir = "%s/release" % self.gitDir
		self.validationDir = "%s/validation" % self.gitDir

		if "baseURL" in self.config:
			workpath = self.config["basePath"][len(self.originalBasePath):]
			self.baseURL = "%s" %self.config["baseURL"]
			try:
				self.pathURL = re.search('(?<=[^/:])/.*', self.baseURL).group(0)
			except AttributeError:
				self.pathURL = ""
			self.fullURL = "%s?prefix=%s/%s/work" %(self.baseURL, self.pathURL, workpath)
			logging.info("URL: %s" % self.fullURL)

		fileMap = { "asvgFile":"arb.svg", "pidFile":"rcubic.pid",
			"logFile":"rcubic.log",	"auditLog":"rcubic.aud",
			"njsonFile":"nodes.json" }
		for k, v in fileMap.iteritems():
			self.config[k] = "%s/work/%s" %(self.config["basePath"], v)


	def _readConfig(self, configFile, mustHaveConfigOptions=None, splitOptions=None):
		if mustHaveConfigOptions is None:
			mustHaveConfigOptions = []
		if splitOptions is None:
			splitOptions = []

		try:
			self.etree = etree.parse(configFile)
		except IOError:
			raise ConfigurationError("ERROR: Could not open configuration file (%s)." %(configFile))
		except etree.XMLSyntaxError as error:
			raise ConfigurationError("ERROR: failed to parse config file (%s): %s" %(configFile, error))

		#TODO save config to local var and then copy values after tweaking
		for element in self.etree.xpath("/rcubic/config/option"):
			try:
				if element.attrib["name"] == "basePath" and "basePath" in self.config:
					raise ConfigurationError("ERROR: basePath is being overriden in %s." %(configFile))
				elif element.attrib["name"] in splitOptions:
					self.config[element.attrib["name"]] = element.attrib["value"].split()
				else:
					self.config[element.attrib["name"]] = element.attrib["value"]
			except KeyError:
				self.config = {}
				raise ConfigurationError("ERROR: Element on line %i of %s is missing an attribute." %(element.sourceline, element.base))

		# Go through resources limit config
		for element in self.etree.xpath("/rcubic/resources/option"):
			try:
				resource = element.attrib["name"]
				value = int(element.attrib["value"])
				if value == -1:
					value = float('inf')
				self.resources[resource] = value
			except ValueError:
				raise ConfigurationError("ERROR: Resource on line %i of %s if not an int." % (element.sourceline, element.base))
			except:
				raise ConfigurationError("ERROR: Resource on line %i of %s is malformed." % (element.sourceline, element.base))

		for mhco in mustHaveConfigOptions:
			if mhco not in self.config:
				raise ConfigurationError("ERROR: %s is not defined in config file (%s)" %(mhco, configFile))

		#value validation does not belong in this function
		if "listenPortRange" in self.config and "listenPortRange" in mustHaveConfigOptions:
			listenPorts=[]
			try:
				for port in self.config["listenPortRange"].split('-'):
					listenPorts.append(int(port.strip()))
				if len(listenPorts) != 2:
					raise ValueError
				self.config["listenPortRange"] = ( listenPorts[0], listenPorts[1] )
			except ValueError:
				raise ConfigurationError("ERROR: port range specification error: %s" %(self.config["listenPortRange"]))

		#value validation does not belong in this function
		if "jobExpireTime" in self.config and "jobExpireTime" in mustHaveConfigOptions:
			try:
				self.config["jobExpireTime"] = int(self.config["jobExpireTime"])
			except ValueError:
				raise ConfigurationError("ERROR: jobExpireTime validation failure")

		# String to bool
		if "fileMode" in mustHaveConfigOptions:
			if self.config["fileMode"].lower() == "true":
				self.config["fileMode"] = True
			elif self.config["fileMode"].lower() == "false":
				self.config["fileMode"] = False
			else:
				raise ConfigurationError("ERROR: fileMode validation failure: expected True/False")

		return True

	def groupSelect(self):
		"""
		What groups do we need to select for execution?
		"""
		groups = []
		groupselect = self._flattenOption(self.opts.group)

		for element in self.etree.xpath("/rcubic/release/install"):
			rg = RCubicGroup(element=element)
			if rg.name in self.config["specialGroups"]:
				rg.forceselect = True
				groups.append(rg)
			elif rg.name in groupselect:
				groups.append(rg)
			elif len(groupselect) == 0:
				if not rg.autoselect:
					logging.info(
						"Skipping %s autoselection is disabled." % (rg.name)
					)
				elif self.log.isNewestVersion(rg.name, rg.version, exectree.ExecJob.STATE_SUCCESSFULL):
					groups.append(rg)
				else:
					logging.info(
						"Skipping %s a version greater than or equal %s is installed." %
						(rg.name, rg.version)
					)

		if len(groups) <= 0:
			raise ConfigurationError("There are 0 configured groups. Nothing to do.")

		for gs in groupselect:
			for g in groups:
				if gs == g.name:
					break
			if gs != g.name:
				raise ConfigurationError("Group '%s' is not in the configuration." %gs)

		logging.info("Installing groups %s." %
			" ".join(sorted([group.name for group in groups]))
		)
		return groups

	def _readNotificationConfig(self):
		count = 0
		for product in self.etree.xpath("/rcubic/notification/product"):
			try:
				self.notification.add_email(product.attrib["name"], product.attrib["email"])
			except KeyError:
				logging.error("Element on line %i of %s is missing an attribute." %(product.sourceline, product.base))
				return 0
			count += 1
		return count

	def reschedule(self, scriptName):
		trees = list(self.tree.subtrees)
		trees.append(self.tree)
		for tree in trees:
			job = tree.find_job(scriptName)
			if job is not None:
				break
		if job is None:
			logging.debug("Reschedule failed: job not found")
			return False
		if not job.is_failed():
			logging.debug("Reschedule failed: job has not failed")
			return False
		job.reset()
		return job.start()

	def manualOverride(self, scriptName):
		trees = list(self.tree.subtrees)
		trees.append(self.tree)
		for tree in trees:
			job = tree.find_job(scriptName)
			if job is not None:
				break
		if job is None:
			logging.debug("Override failed: job not found")
			return False
		if job.state not in job.ERROR_STATES:
			logging.debug("Override failed: job has not failed")
			return False
		job.state = job.STATE_SUCCESSFULL
		return True

	def validate(self):
		errorMessages = ""

		#Validate and run validation scripts
		if not self.opts.weakvalidation:
			if os.path.exists(self.validationDir):
				arguments = [ self.environment, self.opts.release, " ".join(map(str, self.groups))]
				prependRe = re.compile("^", re.M)
				for validationScript in os.listdir(self.validationDir):
					validationScript = "%s/%s" %(self.validationDir, validationScript)
					if not os.access(validationScript, os.X_OK):
						errorMessages += "\tValidation script %s is not executable\n" % (validationScript)
						continue
					with open("/dev/null", "w") as devnull:
						process = subprocess.Popen(["bash", "-n", validationScript], stdout=devnull, stderr=devnull)
					if process.wait() != 0:
						errorMessages += "\tValidation script %s is not valid bash\n" % (validationScript)
						continue
					vsl = [validationScript]
					vsl.extend(arguments)
					process = subprocess.Popen(vsl, cwd = self.releaseDir, stdout = subprocess.PIPE, stderr = subprocess.PIPE )
					if process.wait() != 0:
						stdout, stderr = process.communicate()
						if stdout or stdout:
							errorMessages += "\tValidation script %s failed:\n" % (validationScript)
						if stdout:
							errorMessages += "\t\tstdout:\n"
							errorMessages += prependRe.sub("\t\t\t", stdout.strip(), 0)
							errorMessages += "\n"
						if stderr:
							errorMessages += "\t\tstderr:\n"
							errorMessages += prependRe.sub("\t\t\t", stderr.strip(), 0)
							errorMessages += "\n"

		if errorMessages == "":
			return True
		else:
			return errorMessages

	def _updateProgress(self, scriptName, version, kind, message):
		rs = self.tree.find_job(scriptName)
		if not rs:
			logging.error("received message with unmatched script. (%s, %s)" %(scriptName, version))
			return False
		if rs.version != version:
			logging.error("received message with unmatched version. (%s, %s)" %(scriptName, version))
			return False
		if kind == "PROGRESS":
			if not rs.updateProgress(message):
				logging.error("received message with invalid progress message. (%s, %s, %s)" %(scriptName, version, message))
				return False
		else:
			logging.error("received message with unknown message type (%s)." %(kind))
			return False
		return True

	def statusEventHandler(self, rs, event):
		self.log.saveStatus(rs.group.name, rs.version, rs.job.state, self.gitHead, rs.job.name)
		if rs.job.is_done() and rs.group.is_success():
			self.log.saveStatus(rs.group.name, rs.version, rs.job.state, self.gitHead)

		if self.opts.sessionMode and rs.job.is_failed():
			self.tree.cancel()

		if rs.job.is_failed():
			self.notification.send(
				rs.products,
				"%s (%s) failed" %(rs.name, rs.version),
				rs.job.read_log(1024 * int(self.config['maxEmailLogSizeKB']))
			)
		elif rs.job.failcount > 1 and rs.job.is_success():
			self.notification.send(
				rs.products,
				"%s (%s) recovered" %(rs.name, rs.version),
				"The script %s which has previously failed has now succeeded." % rs.name
			)

	def abort(self, signum=None, frame=None):
		self.tree.cancel()

	def cleanup(self):
		try:
			if(not self.opts.sessionMode):
				uid = uuid.uuid1()
				archiveDir = "%s/%s" % (self.config["archivePath"], uid)
				os.makedirs(archiveDir)
				files = [ self.config['asvgFile'], self.config['njsonFile'] ]
				if not self.opts.foreground and not self.opts.validate:
					files.append(self.config['logFile'])
				for f in files:
					shutil.copy(f, archiveDir)
				if not self.opts.validate:
					shutil.copytree("%s/%s" % (self.config["basePath"], "work/log"), "%s/%s" % (archiveDir,"log"))
				logging.info("Copied files to: %s" % (archiveDir))

				archiveURL = "%s?prefix=%s/archive/%s" %(self.baseURL, self.pathURL, uid)
				logging.info("Job archive available at: %s" % (archiveURL))
				job_log = open("%s/%s" % (self.config["archivePath"], "jobs.txt"), "a")
				job_log.write("%s,%s,%s,%s\n" % (time.strftime("%m/%d/%y - %H:%M"), self.opts.release, ','.join([g.name for g in self.groups]), uid))
				job_log.close()
		except:
			logging.error("Something went wrong while trying to copy files to archive: %s" % (str(sys.exc_info())))

		if self.opts.sessionMode:
			try:
				shutil.rmtree("%s/%s" % (self.config["basePath"], "work/git"))
				logging.debug("Removed git directory from session folder.")
			except:
				logging.error("Something went wrong when trying to remove git directory from session folder: %s" % (str(sys.exc_info())))


	def run(self):
		time.sleep(1) #Sleep to let stdout get re-assigned on daemonization fork

		#In session mode logging to DB makes little sense as it will never be re-used. Instead we just log to memory.
		if self.opts.sessionMode:
			self.log = LogToDB(":memory:")
		else:
			self.log = LogToDB(self.config["auditLog"])

		#Cleanup and setup log directory.
		if not self.opts.sessionMode and os.path.exists(self.logDir):
			try:
				shutil.rmtree(self.logDir)
			except:
				logging.exception("Failed to clean up log directory")
		try:
			os.makedirs(self.logDir)
		except OSError:
			pass

		self.tree.write_status(self.config["asvgFile"], self.config["njsonFile"], False)
		if self.config["SSLKey"] == "" or self.config["SSLCert"] == "":
			self.config["SSLKey"] = None
			self.config["SSLCert"] = None
		if self.config["token"] == "":
			self.config["token"] = None

		self.communicator = RESTCommunicator(self, bind=self.config["listenAddress"], portRange=self.config["listenPortRange"], SSLKey=self.config["SSLKey"], SSLCert=self.config["SSLCert"], token=self.config["token"])
		# Start communicator now so we can get port
		self.communicator.start(block=False)
		logging.info("Server started at %s:%s" % (self.communicator.bind, self.communicator.port))
		self.token = self.communicator.token
		self.port = self.communicator.port

		self.tree.extend_args([self.environment, `self.port`, `self.port`])
		self.tree.spawn_json_updater(self.config["njsonFile"])
		self.tree.run(timeout=self.config["jobExpireTime"]*60*60)
		self.tree.write_status(self.config["asvgFile"], self.config["njsonFile"], True)
		self.communicator.stop()

		self.cleanup()

		if not self.tree.is_done():
			logging.error("exited with orphaned jobs")
			return False
		return self.tree.is_success()

class RcubicDaemon(Daemon):
	def setRcubic(self,rcubic):
		self.rcubic = rcubic
	def run(self):
		self.rcubic.run()

def _setupLogging(debug=False):
	dpp12_time = '%Y-%m-%d %H:%M:%S' + str.format('{0:+06.2f}', float(time.altzone) / 3600).replace(".", "")
	if not debug:
		log_format = logging.Formatter('[%(asctime)s] | %(filename)s | %(process)d | %(levelname)s | %(message)s', datefmt=dpp12_time)
	else:
		log_format = logging.Formatter('[%(asctime)s] | %(filename)s:%(lineno)d | %(process)d | %(levelname)s | %(message)s', datefmt=dpp12_time)
	handler = logging.StreamHandler()
	handler.setFormatter(log_format)
	logger = logging.getLogger('')
	if not debug:
		logger.setLevel(logging.INFO)
	else:
		logger.setLevel(logging.DEBUG)
	logger.addHandler(handler)

def _stack_trace(signum, frame):
	traceback.print_stack()

if __name__ == "__main__":
	argParser = argparse.ArgumentParser(description='Rcubic does stuff! Important stuff!')
	argParser.add_argument('-r', dest='release', metavar='release_directory', required=False, help='Release. Number.')
	argParser.add_argument('-g', dest='group', metavar='group', action='append', default=[],
							help='Select Group to run. Can be specified multiple times for multiple groups.')
	argParser.add_argument('-v', dest='validate', action='store_const', const=True, default=False, help='Validate configuration.')
	argParser.add_argument('-w', '--weakval', dest='weakvalidation', action='store_const', const=True, default=False, help='Skip validation scripts.')
	argParser.add_argument('-f', dest='foreground', action='store_const', const=True, default=False,  help='Run in foreground (debug) mode.')
	argParser.add_argument('-s', dest='sessionMode', action='store_const', const=True, default=False,  help='Run in Session mode.')
	argParser.add_argument('-a', dest='whitelist', action='append', default=None,
							help='Exchaustive white list of scripts to run. Comma separated or pass in multiple flags. Conflicts with -A')
	argParser.add_argument('-A', dest='blacklist', action='append', default=None,
							help='Black list of script to not add to tree. Comma separated or pass in multiple flags. Conflicts with -a')
	argParser.add_argument('--refspec', dest='refspec', metavar='refspec', default=None,  help='refspec to fetch from, sets branch to FETCH_HEAD.')
	argParser.add_argument('-b', dest='branch', metavar='branch', default=None, help='branch to checkout defaults to master unless --refspec is specified')
	argParser.add_argument('-e', dest='environment', metavar='environmet', required=False, help='Environment options.')
	argParser.add_argument('-D','--debug', dest='debug', action='store_const', const=True, default=False, help='Log in debug level.')
	opts = argParser.parse_args()

	_setupLogging(opts.debug)

	try:
		rcubic = Rcubic(opts)
	except ConfigurationError as ce:
		logging.error(ce)
		logging.error("Encountered configuration error. See above for cause of failure.")
		sys.exit(2)

	if opts.validate:
		logging.info("Passed Validation!") #This won't be reached if errors are found.
		sys.exit(0)

	signal.signal(signal.SIGTERM, rcubic.abort)
	signal.signal(signal.SIGINT, rcubic.abort)
	signal.signal(signal.SIGQUIT, _stack_trace)

	if opts.foreground:
		if rcubic.run():
			sys.exit(0)
		else:
			sys.exit(1)
	else:
		rcubicd = RcubicDaemon(rcubic.config["pidFile"], stdout=rcubic.config["logFile"], stderr=rcubic.config["logFile"])
		rcubicd.setRcubic(rcubic)
		rcubicd.start()
